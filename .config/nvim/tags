!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
<F8>	init.vim	/^nmap <F8> :TagbarToggle<CR>$/;"	m
<Leader>s	init.vim	/^nnoremap <Leader>s :%s\/\\<<C-r><C-w>\\>\/$/;"	m
<S-Tab>	after/plugin/nmap.vim	/^nmap <S-Tab> <C-W><C-W>$/;"	m
<S-Tab>	init.vim	/^nmap <S-Tab> <C-W><C-W>$/;"	m
<S-j>	init.vim	/^nmap <S-j> :m -2 <CR>$/;"	m
<S-k>	init.vim	/^nmap <S-k> :m +1 <CR>$/;"	m
<TAB>	init.vim	/^inoremap <expr> <TAB> pumvisible() ? "\\<C-y>" : "\\<TAB>"$/;"	m
<Tab>	after/plugin/nmap.vim	/^nmap <Tab> :bn<CR>$/;"	m
<Tab>	init.vim	/^nmap <Tab> :bn<CR>$/;"	m
<leader>	after/plugin/nmap.vim	/^nmap <leader> tt : ToggleTerm size=50$/;"	m
<leader>1	after/plugin/nmap.vim	/^nmap <leader>1 :mark a <CR>$/;"	m
<leader><leader>1	after/plugin/nmap.vim	/^nmap <leader><leader>1 'a$/;"	m
<leader><leader>c	init.vim	/^nmap <leader><leader>c :Commentary <CR>$/;"	m
<leader>b	after/plugin/nmap.vim	/^nmap <leader>b :Buffers<CR>$/;"	m
<leader>b	init.vim	/^nmap <leader>b :lua require('telescope.builtin').buffers()<CR>$/;"	m
<leader>bg	init.vim	/^nmap <leader>bg :lua require('telescope.builtin').git_files()<CR>$/;"	m
<leader>bq	init.vim	/^nmap <leader>bq :lua require('telescope.builtin').quickfix()<CR>$/;"	m
<leader>br	init.vim	/^nmap <leader>br :lua require('telescope.builtin').live_grep()<CR>$/;"	m
<leader>f	init.vim	/^nmap <leader>f :lua require('telescope.builtin').find_files()<CR>$/;"	m
<leader>g1	after/plugin/nmap.vim	/^nmap <leader>g1 :diffget \/\/2<CR> $/;"	m
<leader>g1	init.vim	/^nmap <leader>g1 :diffget \/\/2<CR> $/;"	m
<leader>g2	after/plugin/nmap.vim	/^nmap <leader>g2 :diffget \/\/3<CR> $/;"	m
<leader>g2	init.vim	/^nmap <leader>g2 :diffget \/\/3<CR> $/;"	m
<leader>gb	after/plugin/nmap.vim	/^nmap <leader>gb :Git checkout$/;"	m
<leader>gb	init.vim	/^nmap <leader>gb :Git checkout$/;"	m
<leader>gc	after/plugin/nmap.vim	/^nmap <leader>gc :Git commit<CR>$/;"	m
<leader>gc	init.vim	/^nmap <leader>gc :Git commit<CR>$/;"	m
<leader>gm	after/plugin/nmap.vim	/^nmap <leader>gm :call FzfMan()<CR>$/;"	m
<leader>gm	init.vim	/^nmap <leader>gm :call FzfMan()<CR>$/;"	m
<leader>gp	after/plugin/nmap.vim	/^nmap <leader>gp :Git push<CR>$/;"	m
<leader>gp	init.vim	/^nmap <leader>gp :Git push<CR>$/;"	m
<leader>gs	after/plugin/nmap.vim	/^nmap <leader>gs :G<CR>$/;"	m
<leader>gs	init.vim	/^nmap <leader>gs :G<CR>$/;"	m
<leader>rc	init.vim	/^nmap <leader>rc :lua require('rc_telescope').search_dotfiles()<CR>$/;"	m
<leader>t	init.vim	/^nmap <leader>t :! ctags <CR> :lua require('telescope.builtin').tags()<CR>$/;"	m
<space>	init.vim	/^nnoremap <space> za$/;"	m
M.on_attach 	lua/lsp_config.lua	/^M.on_attach = function(client, bufnr)$/;"	f
M.search_dotfiles 	lua/rc_telescope.lua	/^M.search_dotfiles = function()$/;"	f
M.setup 	lua/lsp_config.lua	/^M.setup = function()$/;"	f
Norm	after/plugin/norm.vim	/^function! Norm()$/;"	f
colors_name	Colors/ColorCyan.vim	/^let colors_name = "default"$/;"	v
expand 	lua/cmp_config.lua	/^    expand = function(args)$/;"	f
format 	lua/cmp_config.lua	/^    format = function(entry, vim_item)$/;"	f
g:UltiSnipsExpandJumpForwardTrigger	init.vim	/^let g:UltiSnipsExpandJumpForwardTrigger='<Tab>'$/;"	v
g:airline#extensions#branch#enabled	init.vim	/^let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#formatter	init.vim	/^let g:airline#extensions#tabline#formatter = 'unique_tail'$/;"	v
g:airline#extensions#tabline#left_alt_sep	init.vim	/^let g:airline#extensions#tabline#left_alt_sep = ''$/;"	v
g:airline#extensions#tabline#left_sep	init.vim	/^let g:airline#extensions#tabline#left_sep = ''$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_symbols	init.vim	/^    let g:airline_symbols = {}$/;"	v
g:airline_theme	init.vim	/^let g:airline_theme="cool"$/;"	v
g:c_syntax_for_h	init.vim	/^let g:c_syntax_for_h = 1$/;"	v
g:cmake_link_compile_commands	init.vim	/^let g:cmake_link_compile_commands = 0$/;"	v
g:coc_snippet_next	init.vim	/^let g:coc_snippet_next = '<TAB>'$/;"	v
g:coc_snippet_prev	init.vim	/^let g:coc_snippet_prev = '<S-TAB>'$/;"	v
g:colors_name	Colors/waxcoin.vim	/^let g:colors_name='nvcode'$/;"	v
g:completion_matching_strategy_list	init.vim	/^let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy', 'all']$/;"	v
g:cpp_attributes_highlight	init.vim	/^let g:cpp_attributes_highlight = 1$/;"	v
g:cpp_function_highlight	init.vim	/^let g:cpp_function_highlight = 1$/;"	v
g:cpp_member_highlight	init.vim	/^let g:cpp_member_highlight = 1$/;"	v
g:ft_man_open_mode	init.vim	/^let g:ft_man_open_mode = 'vert'$/;"	v
g:indent_guides_auto_colors	init.vim	/^let g:indent_guides_auto_colors = 0$/;"	v
g:indent_guides_enable_on_vim_startup	init.vim	/^let g:indent_guides_enable_on_vim_startup = 1$/;"	v
g:indent_guides_guide_size	init.vim	/^let g:indent_guides_guide_size = 1$/;"	v
g:indent_guides_start_level	init.vim	/^let g:indent_guides_start_level = 2$/;"	v
g:netrw_banner	init.vim	/^let g:netrw_banner = 0$/;"	v
g:netrw_liststyle	init.vim	/^let g:netrw_liststyle = 3$/;"	v
g:netrw_winsize	init.vim	/^let g:netrw_winsize = 20$/;"	v
g:nvcode_termcolors	init.vim	/^let g:nvcode_termcolors=256$/;"	v
g:startify_bookmarks	after/plugin/startity_config.vim	/^let g:startify_bookmarks = [$/;"	v
g:startify_custom_header	after/plugin/startity_config.vim	/^let g:startify_custom_header = [$/;"	v
g:startify_lists	after/plugin/startity_config.vim	/^let g:startify_lists = [$/;"	v
g:startify_session_dir	after/plugin/startity_config.vim	/^let g:startify_session_dir = "~\/.dotfiles\/nvim\/sessions"$/;"	v
g:vimspector_enable_mappings	init.vim	/^let g:vimspector_enable_mappings = 'HUMAN'$/;"	v
local check_backspace 	lua/cmp_config.lua	/^local check_backspace = function()$/;"	f
lsp_highlight_document	lua/lsp_config.lua	/^local function lsp_highlight_document(client)$/;"	f
lsp_keymaps	lua/lsp_config.lua	/^local function lsp_keymaps(bufnr)$/;"	f
main	main.c	/^int	main(int ac, char **av)$/;"	f
mapleader	after/plugin/nmap.vim	/^let mapleader = " "$/;"	v
mapleader	init.vim	/^let mapleader = " "$/;"	v
open_fn  	lua/plugin.lua	/^    open_fn  = nil, -- An optional function to open a window for packer's display$/;"	f
quickfix	after/plugin/nmap.vim	/^augroup quickfix$/;"	a
